import jwt
from datetime import (datetime, timezone, timedelta)
from .key_helper import KeyHelper
import re


class TokenHelper:
    @staticmethod
    def user_pair_tokens(payload:dict)->tuple[str,str]:
        payload['iss']='Ruy\'AI'
        # payload['exp']= datetime.now(timezone.utc)+timedelta(hours=1, minutes=30)
        # TODO: Remove after presentation
        payload['exp']= datetime.now(timezone.utc)+timedelta(days=1)
        
        token:str=jwt.encode(
            payload=payload, 
            key=KeyHelper.get_private(), 
            algorithm='RS256'
        )
        
        payload['exp']= datetime.now(timezone.utc)+timedelta(days=15)

        ref:str=jwt.encode(
            payload=payload, 
            key=KeyHelper.get_private(), 
            algorithm='RS256'
        )
        return (token, ref)
    

    @staticmethod
    def verify(token:str)->tuple[dict|None, bool]:
        try:
            decoded:dict=jwt.decode(
                token,
                key=KeyHelper.get_public(),
                algorithms=['RS256']
            )

            if decoded.get('key') != None:
                key:str = decoded.get('key')
                if not key.startswith('sk_'): raise jwt.DecodeError('Invalid API Key')

                key = key[3:]
                if not re.fullmatch(r'[0-9a-f]{64}', key): raise jwt.DecodeError('Invalid API Key')

                correct:bool= 'Ruy\'AI' == decoded['iss']
                if not correct: raise jwt.DecodeError('Not generated by us')

                return (decoded, True)

            
            isexpired:bool= datetime.now(timezone.utc).timestamp() > decoded['exp']
            if isexpired: raise jwt.DecodeError('Expired')

            correct:bool= 'Ruy\'AI' == decoded['iss']
            if not correct: raise jwt.DecodeError('Not generated by us')

            return decoded, (not isexpired and correct)
        except jwt.DecodeError as d:
            return None, False
        except jwt.ExpiredSignatureError as s:
            return None, False

    @staticmethod
    def revoke(refToken:str):
        pass

    @staticmethod
    def key(payload:dict)->str:
        payload['iss']='Ruy\'AI'
        key:str=jwt.encode(
            payload=payload, 
            key=KeyHelper.get_private(), 
            algorithm='RS256'
        )
        return key